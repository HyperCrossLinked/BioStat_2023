pivot_longer(!Category) %>%
separate(name, into = c("Переменная", "Стаитистика"), sep = "__") %>%
rename(`Значение` = value)
# Можно применить стандартную функцию, но она не всё выводит квантили и прочее
# psych::describe(cleaned_data %>% select_if(is.numeric))
statistics <-  list(
`_Количество значений` = ~sum(!is.na(.)) %>% as.character,
`_Количество пропущенных значений` = ~sum(is.na(.)) %>% as.character,
`_Ср. знач.` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", mean(.x, na.rm = TRUE) %>% round(2) %>% as.character()),
`_Станд. отклон.` = ~ifelse(sum(!is.na(.x)) < 3, "Н/П*", sd(.x, na.rm = TRUE) %>% round(2) %>% as.character()),
`_95% ДИ для среднего верх` = ~(mean(.x, na.rm = TRUE) + 2*(sd(.x, na.rm = TRUE)/sqrt(sum(!is.na(.))))) %>% round(2) %>% as.character(),
`_95% ДИ для среднего низ` = ~(mean(.x, na.rm = TRUE) + 2*(sd(.x, na.rm = TRUE)/sqrt(sum(!is.na(.))))) %>% round(2) %>% as.character(),
`_мин. - макс.` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", paste0(min(.x, na.rm = TRUE) %>% round(2), " - ", max(.x, na.rm = TRUE) %>% round(2))),
`_Медиана` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", median(.x, na.rm = TRUE) %>% round(2) %>% as.character()),
`_Q1 - Q3` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", paste0(quantile(.x, 0.25, na.rm = TRUE) %>% round(2), " - ", quantile(.x, 0.75, na.rm = TRUE) %>% round(2)))
)
cleaned_data %>%
select(Category, where(is.numeric)) %>%
group_by(Category) %>%
summarise(across(where(is.numeric), statistics)) %>%
pivot_longer(!Category) %>%
separate(name, into = c("Переменная", "Стаитистика"), sep = "__") %>%
rename(`Значение` = value)
# Можно применить стандартную функцию, но она не всё выводит квантили и прочее
# psych::describe(cleaned_data %>% select_if(is.numeric))
statistics <-  list(
`_Количество значений` = ~sum(!is.na(.)) %>% as.character,
`_Количество пропущенных значений` = ~sum(is.na(.)) %>% as.character,
`_Ср. знач.` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", mean(.x, na.rm = TRUE) %>% round(2) %>% as.character()),
`_Станд. отклон.` = ~ifelse(sum(!is.na(.x)) < 3, "Н/П*", sd(.x, na.rm = TRUE) %>% round(2) %>% as.character()),
`_95% ДИ для среднего верх` = ~(mean(.x, na.rm = TRUE) + 2*(sd(.x, na.rm = TRUE)/sqrt(sum(!is.na(.))))) %>% round(2) %>% as.character(),
`_95% ДИ для среднего низ` = ~(mean(.x, na.rm = TRUE) - 2*(sd(.x, na.rm = TRUE)/sqrt(sum(!is.na(.))))) %>% round(2) %>% as.character(),
`_мин. - макс.` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", paste0(min(.x, na.rm = TRUE) %>% round(2), " - ", max(.x, na.rm = TRUE) %>% round(2))),
`_Медиана` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", median(.x, na.rm = TRUE) %>% round(2) %>% as.character()),
`_Q1 - Q3` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", paste0(quantile(.x, 0.25, na.rm = TRUE) %>% round(2), " - ", quantile(.x, 0.75, na.rm = TRUE) %>% round(2)))
)
cleaned_data %>%
select(Category, where(is.numeric)) %>%
group_by(Category) %>%
summarise(across(where(is.numeric), statistics)) %>%
pivot_longer(!Category) %>%
separate(name, into = c("Переменная", "Стаитистика"), sep = "__") %>%
rename(`Значение` = value)
# Можно применить стандартную функцию, но она не всё выводит квантили и прочее
# psych::describe(cleaned_data %>% select_if(is.numeric))
statistics <-  list(
`_Количество значений` = ~sum(!is.na(.)) %>% as.character,
`_Количество пропущенных значений` = ~sum(is.na(.)) %>% as.character,
`_Ср. знач.` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", mean(.x, na.rm = TRUE) %>% round(2) %>% as.character()),
`_Станд. отклон.` = ~ifelse(sum(!is.na(.x)) < 3, "Н/П*", sd(.x, na.rm = TRUE) %>% round(2) %>% as.character()),
# С ходу не понял как знаения t распределения посчитать, поэтому проще посчитаем
# По хорошему значения не нормальны, поэтому бутстрапом нужно ДИ искарть
`_95% ДИ для среднего верх` = ~(mean(.x, na.rm = TRUE) + 1.96*(sd(.x, na.rm = TRUE)/sqrt(sum(!is.na(.))))) %>% round(2) %>% as.character(),
`_95% ДИ для среднего низ` = ~(mean(.x, na.rm = TRUE) - 1.96*(sd(.x, na.rm = TRUE)/sqrt(sum(!is.na(.))))) %>% round(2) %>% as.character(),
`_мин. - макс.` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", paste0(min(.x, na.rm = TRUE) %>% round(2), " - ", max(.x, na.rm = TRUE) %>% round(2))),
`_Медиана` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", median(.x, na.rm = TRUE) %>% round(2) %>% as.character()),
`_Q1 - Q3` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", paste0(quantile(.x, 0.25, na.rm = TRUE) %>% round(2), " - ", quantile(.x, 0.75, na.rm = TRUE) %>% round(2)))
)
cleaned_data %>%
select(Category, where(is.numeric)) %>%
group_by(Category) %>%
summarise(across(where(is.numeric), statistics)) %>%
pivot_longer(!Category) %>%
separate(name, into = c("Переменная", "Стаитистика"), sep = "__") %>%
rename(`Значение` = value)
View(cleaned_data)
View(cleaned_data)
# Расчет абсолютного количества
cleaned_data %>%
group_by(Category) %>%
count(name = "Absolute Count")
# Расчет относительного количества внутри группы
cleaned_data %>%
group_by(Category) %>%
summarise(n = n()) %>%
mutate(Relative_Count = n / sum(n))
for (col in cleaned_data %>% select_if(is.numeric)) {
#print(col)
print(ggplot(cleaned_data, aes(x = Category, y = col, color = Category, fill = Category)) +
geom_boxplot() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
)
}
cleaned_data %>%
pivot_longer(-Category, names_to = "variable", values_to = "value") %>%
ggplot(aes(x = Category, y = value, color = Category, fill = Category)) +
geom_boxplot() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
facet_wrap(~ variable, scales = "free")
cleaned_data %>%
select(Category, where(is.numeric)) %>%
pivot_longer(-Category, names_to = "variable", values_to = "value") %>%
ggplot(aes(x = Category, y = value, color = Category, fill = Category)) +
geom_boxplot() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
facet_wrap(~ variable, scales = "free")
cleaned_data %>%
select(Category, where(is.numeric)) %>%
pivot_longer(-Category, names_to = "variable", values_to = "value") %>%
ggplot(aes(x = Category, y = value, color = Category, fill = Category)) +
geom_boxplot() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
plots <- cleaned_data %>%
select(Category, where(is.numeric)) %>%
pivot_longer(-Category, names_to = "variable", values_to = "value") %>%
ggplot(aes(x = Category, y = value, color = Category, fill = Category)) +
geom_boxplot() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
for (p in plots) {
print(p)
}
plots <- cleaned_data %>%
select(Category, where(is.numeric)) %>%
lapply(names(cleaned_data, function(col){
pivot_longer(-Category, names_to = "variable", values_to = "value") %>%
ggplot(aes(x = Category, y = value, color = Category, fill = Category)) +
geom_boxplot() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
}
for (p in plots) {
plots <- cleaned_data %>%
select(Category, where(is.numeric)) %>%
lapply(names(сleaned_data, function(col){
pivot_longer(-Category, names_to = "variable", values_to = "value") %>%
ggplot(aes(x = Category, y = value, color = Category, fill = Category)) +
geom_boxplot() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
})
for (p in plots) {
plots <- cleaned_data %>%
select(Category, where(is.numeric)) %>%
lapply(names(сleaned_data, function(col){
pivot_longer(-Category, names_to = "variable", values_to = "value") %>%
ggplot(aes(x = Category, y = value, color = Category, fill = Category)) +
geom_boxplot() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
})
for (p in plots) {
plots <- cleaned_data %>%
select(Category, where(is.numeric)) %>%
lapply(names(сleaned_data, function(col)){
plots <- cleaned_data %>%
select(Category, where(is.numeric)) %>%
lapply(names(сleaned_data), function(col){
pivot_longer(-Category, names_to = "variable", values_to = "value") %>%
ggplot(aes(x = Category, y = value, color = Category, fill = Category)) +
geom_boxplot() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
})
plots <- cleaned_data %>%
select(Category, where(is.numeric)) %>%
lapply(names(сleaned_data), function(col){
pivot_longer(-Category, names_to = "variable", values_to = "value") %>%
ggplot(aes(x = Category, y = value, color = Category, fill = Category)) +
geom_boxplot() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
}
for (p in plots) {
plots <- cleaned_data %>%
select(Category, where(is.numeric)) %>%
lapply(names(сleaned_data), function(col){
pivot_longer(-Category, names_to = "variable", values_to = "value") %>%
ggplot(aes(x = Category, y = value, color = Category, fill = Category)) +
geom_boxplot() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
})
plots <- cleaned_data %>%
select(Category, where(is.numeric)) %>%
lapply(names(), function(col){
pivot_longer(-Category, names_to = "variable", values_to = "value") %>%
ggplot(aes(x = Category, y = value, color = Category, fill = Category)) +
geom_boxplot() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
})
plots <- cleaned_data %>%
select(Category, where(is.numeric)) %>%
lapply(names(cleaned_data), function(col){
pivot_longer(-Category, names_to = "variable", values_to = "value") %>%
ggplot(aes(x = Category, y = value, color = Category, fill = Category)) +
geom_boxplot() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
})
plots <- cleaned_data %>%
select(Category, where(is.numeric)) %>%
lapply(cleaned_data, function(col){
pivot_longer(-Category, names_to = "variable", values_to = "value") %>%
ggplot(aes(x = Category, y = value, color = Category, fill = Category)) +
geom_boxplot() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
})
for (col in cleaned_data %>% select_if(is.numeric)) {
#print(col)
print(ggplot(cleaned_data, aes(x = Category, y = col, color = Category, fill = Category)) +
geom_boxplot() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
)
}
library(beeswarm)
#library(beeswarm)
for (col in names(cleaned_data %>% select_if(is.numeric))) {
p <- ggplot(cleaned_data, aes_string(
x = "Category",
y = col,
color = "Category",
fill = "Category")
) +
geom_boxplot() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
print(p)
beeswarm(as.formula(paste(col, "~ Category", sep = "")), data = cleaned_data, pch = 16, pwcol = as.numeric(factor(cleaned_data$Category)), size = 1.5, method = "swarm")
boxplot(as.formula(paste(col, "~ Category", sep = "")), data = cleaned_data, add = TRUE, outline = FALSE, frame = FALSE)
}
install.packages("beeswarm")
library(beeswarm)
for (col in names(cleaned_data %>% select_if(is.numeric))) {
p <- ggplot(cleaned_data, aes_string(
x = "Category",
y = col,
color = "Category",
fill = "Category")
) +
geom_boxplot() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
print(p)
beeswarm(as.formula(paste(col, "~ Category", sep = "")), data = cleaned_data, pch = 16, pwcol = as.numeric(factor(cleaned_data$Category)), size = 1.5, method = "swarm")
boxplot(as.formula(paste(col, "~ Category", sep = "")), data = cleaned_data, add = TRUE, outline = FALSE, frame = FALSE)
}
library(beeswarm)
for (col in names(cleaned_data %>% select_if(is.numeric))) {
p <- ggplot(cleaned_data, aes_string(
x = "Category",
y = col,
color = "Category",
fill = "Category")
) +
geom_boxplot() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
print(p)
beeswarm(as.formula(paste(col, "~ Category", sep = "")), data = cleaned_data, pch = 16, pwcol = ToColor(as.numeric(factor(cleaned_data$Category))), cex = 1.5, method = "swarm")
boxplot(as.formula(paste(col, "~ Category", sep = "")), data = cleaned_data, add = TRUE, outline = FALSE, frame = FALSE)
}
for (col in names(cleaned_data %>% select_if(is.numeric))) {
p <- ggplot(cleaned_data, aes_string(
x = "Category",
y = col,
color = "Category",
fill = "Category")
) +
geom_boxplot() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
print(p)
beeswarm(as.formula(paste(col, "~ Category", sep = "")), data = cleaned_data,
pch = 16,
pwcol = brewer.pal(n = length(unique(cleaned_data$Category)), name = "Set1")[as.numeric(factor(cleaned_data$Category))],
cex = 1.5,
method = "swarm")
boxplot(as.formula(paste(col, "~ Category", sep = "")), data = cleaned_data, add = TRUE, outline = FALSE, frame = FALSE)
}
for (col in cleaned_data %>% select_if(is.numeric)) {
#print(col)
print(ggplot(cleaned_data, aes(x = Category, y = col, color = Category, fill = Category)) +
geom_boxplot() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
)
}
for (col in cleaned_data %>% select_if(is.factor)) {
#print(col)
print(ggplot(cleaned_data, aes(x = Category, y = col, color = Category, fill = Category)) +
geom_bar(width = 1, stat = "identity") +
#coord_polar() +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1")
)
}
for (name in names(cleaned_data %>% select_if(is.factor))) {
print(
ggplot(cleaned_data, aes_string(x = "1", fill = name)) +
geom_bar(width = 1) +
coord_polar(theta = "y") +
scale_fill_brewer(palette = "Set1") +
labs(x = NULL, fill = name) +
theme_void() +
theme(legend.position = "right")
)
}
fdata <- data %>%
# Выбираем столбцы по числу пропусков а затем строки
select(which(colMeans(is.na(.)) <= 0.2)) %>%
filter(rowSums(is.na(.)) / ncol(.) <= 0.2) %>%
# Переиминуем все переменные, заменим в названии дата пробелы и прочее на нижний прочерк
rename_with(function(x) x %>% stri_replace_all_regex(c("Data.", "\\.", " ", "-"), c("", "_", "_", ""), vectorize_all = F)) %>%
# Вроде как тут только категория факторная переменная, остальные нумерик
# `Nutrient Data Bank Number` - уникальный номер, является ли он фактором?
# Пр идее да, как в моделях со случайным интерцептом
# Но далее будет не красиво если считаем это категориями
mutate(across(c(`Category`), function(x) as.factor(x))) %>%
mutate(across(c(`Description`), function(x) as.character(x))) %>%
# Сортируем по убыванию
# Из задания не понятно по какой переменной
arrange(desc(`Sugar_Total`))
# Сохраняем выбросы в датасет как строки, значение переменных которых отклоняется от среднего значения по всем строкам более чем на 3 сигмы
outliers <- fdata %>%
filter(if_any(where(is.numeric), function(x) abs(x - mean(x)) > 3 * sd(x)))
# Сохраняем выбросы в файл
outliers %>%
write_delim("data/outliers.csv", delim = ",", na = "NA")
# Cохраняем только рис и печеньки
cleaned_data <- fdata %>%
filter(`Category` %in% c('Rice', 'Cookie'))
# Смотрим что получилось
glimpse(fdata)
for (name in names(cleaned_data %>% select_if(is.factor))) {
print(
ggplot(cleaned_data, aes_string(x = "1", fill = name)) +
geom_bar(width = 1) +
coord_polar(theta = "y") +
scale_fill_brewer(palette = "Set1") +
labs(x = NULL, fill = name) +
theme_void() +
theme(legend.position = "right")
)
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stringi)
library(dplyr)
numeric_vars <- cleaned_data %>% select_if(is.numeric)
shapiro_results <- sapply(numeric_vars, shapiro.test)
# нормальными являются те переменные, где p-value меньше 0.05. В данном случае нормальных переменных нет
numeric_vars <- cleaned_data %>% select_if(is.numeric)
shapiro_results_list <- lapply(numeric_vars, shapiro.test)
shapiro_results <- data.frame(
variable = names(shapiro_results_list),
W = sapply(shapiro_results_list, function(x) x$statistic),
p_value = sapply(shapiro_results_list, function(x) x$p.value)
)
print(shapiro_results)
# нормальными являются те переменные, где p-value меньше 0.05. В данном случае нормальных переменных нет
numeric_vars <- cleaned_data %>% select_if(is.numeric)
shapiro_results_list <- lapply(numeric_vars, shapiro.test)
shapiro_results <- data.frame(
variable = names(shapiro_results_list),
W = sapply(shapiro_results_list, function(x) x$statistic),
p_value = sapply(shapiro_results_list, function(x) x$p.value)
)
shapiro_results <- shapiro_results %>%
mutate(normal? = if_else(p_value > 0.05, "yes", "no"))
numeric_vars <- cleaned_data %>% select_if(is.numeric)
shapiro_results_list <- lapply(numeric_vars, shapiro.test)
shapiro_results <- data.frame(
variable = names(shapiro_results_list),
W = sapply(shapiro_results_list, function(x) x$statistic),
p_value = sapply(shapiro_results_list, function(x) x$p.value)
)
shapiro_results <- shapiro_results %>%
mutate(`normal?` = if_else(p_value > 0.05, "yes", "no"))
print(shapiro_results)
# нормальными являются те переменные, где p-value меньше 0.05. В данном случае нормальных переменных нет
numeric_vars <- cleaned_data %>% select_if(is.numeric)
shapiro_results_list <- lapply(numeric_vars, shapiro.test)
shapiro_results <- data.frame(
variable = names(shapiro_results_list),
W = sapply(shapiro_results_list, function(x) x$statistic),
p_value = sapply(shapiro_results_list, function(x) x$p.value)
)
shapiro_results <- shapiro_results %>%
mutate(`is_normal` = if_else(p_value > 0.05, "yes", "no"))
print(shapiro_results)
# нормальными являются те переменные, где p-value меньше 0.05. В данном случае нормальных переменных нет
numeric_vars <- cleaned_data %>% select_if(is.numeric)
shapiro_results_list <- lapply(numeric_vars, shapiro.test)
shapiro_results <- data.frame(
variable = names(shapiro_results_list),
W = sapply(shapiro_results_list, function(x) x$statistic),
p_value = sapply(shapiro_results_list, function(x) x$p.value)
)
shapiro_results <- shapiro_results %>%
mutate(`is_normal` = if_else(p_value > 0.05, "yes", "no"))
print(shapiro_results)
for (col in cleaned_data %>% select_if(is.numeric)) {
#print(col)
print(qqnorm(col))
}
for (col in cleaned_data %>% select_if(is.numeric)) {
#print(col)
print(qqnorm(col, main = col))
}
cols <- colnames(cleaned_data %>% select_if(is.numeric))
for (col in cols) {
qqnorm(cleaned_data[[col]], main = col)
qqline(cleaned_data[[col]], col = "red")
}
wilcox_test <- wilcox.test(cleaned_data %>% select_if(is.numeric())
p_value = rep(wilcox_test$p.value, 2)
wilcox_test <- wilcox.test(cleaned_data %>% select_if(is.numeric()))
wilcox_test <- wilcox.test(cleaned_data %>% select_if(is.numeric))
View(cleaned_data)
View(cleaned_data)
View(cleaned_data)
View(cleaned_data)
# Разделите данные на две группы
group1_data <- cleaned_data %>% filter(category == Cookie) %>% pull(num_var)
# Разделите данные на две группы
group1_data <- cleaned_data %>% filter(Category == Cookie) %>% pull(num_var)
# Разделите данные на две группы
group1_data <- cleaned_data %>% filter(Category == `Cookie`) %>% pull(num_var)
# Постройте таблицу с медианами каждой группы
medians <- cleaned_data %>%
group_by(Category) %>%
summarize(Median = median(score, na.rm = TRUE))
# Постройте таблицу с медианами каждой группы
medians <- cleaned_data %>%
group_by(Category) %>%
summarize(Median = median(., na.rm = TRUE))
# Постройте таблицу с медианами каждой группы
medians <- cleaned_data %>%
group_by(Category) %>%
summarize(Median = median(score, na.rm = TRUE))
# Группировка по категории и подсчёт медиан
medians <- cleaned_data %>%
group_by(Category) %>%
summarize(across(where(is.numeric), median, na.rm = TRUE))
# Разделение данных на 2 группы
groups <- split(cleaned_data, cleaned_data$Category)
# Выполнение теста Манна-Уитни для каждой числовой переменной
p_values <- cleaned_data %>%
select(where(is.numeric)) %>%
map_dfr(~wilcox.test(groups[[1]][[.]], groups[[2]][[.]], exact=FALSE)$p.value) %>%
mutate(across(everything(), round, 3))
# Группировка по категории и подсчёт медиан
medians <- cleaned_data %>%
mutate(across(c(`Nutrient_Bank_Number`), function(x) as.factor(x))) %>%
group_by(Category) %>%
summarize(across(where(is.numeric), median, na.rm = TRUE))
# Разделение данных на 2 группы
groups <- split(cleaned_data, cleaned_data$Category)
# Выполнение теста Манна-Уитни для каждой числовой переменной
p_values <- cleaned_data %>%
select(where(is.numeric)) %>%
map_dfr(~wilcox.test(groups[[1]][[.]], groups[[2]][[.]], exact=FALSE)$p.value) %>%
mutate(across(everything(), round, 3))
num_vars <- sapply(cleaned_data, is.numeric)
# создаем dataframe с медианами
medians_df <- cleaned_data %>%
group_by(Category) %>%
summarise_if(is.numeric, median)
# создаем dataframe с p-значениями теста Манна-Уитни
wilcox_df <- cleaned_data %>%
summarise_if(is.numeric, ~ wilcox.test(. ~ Category, data = cleaned_data)$p.value)
# объединяем два dataframe
final_df <- bind_cols(medians_df, wilcox_df)
num_vars <- sapply(cleaned_data, is.numeric)
# создаем dataframe с медианами
medians_df <- cleaned_data %>%
group_by(Category) %>%
summarise_if(is.numeric, median)
# создаем dataframe с p-значениями теста Манна-Уитни
wilcox_df <- cleaned_data %>%
summarise_if(is.numeric, ~ wilcox.test(. ~ Category, data = cleaned_data)$p.value)
# объединяем два dataframe
final_df <- bind_cols(medians_df, wilcox_df)
medians_df <- cleaned_data %>%
group_by(Category) %>%
summarise_if(is.numeric, median) %>%
rename_with(~paste0("median_", .))
# создаем dataframe с p-значениями теста Манна-Уитни
wilcox_df <- cleaned_data %>%
summarise_if(is.numeric, ~ wilcox.test(. ~ Category, data = cleaned_data)$p.value) %>%
rename_with(~paste0("wilcox_", .))
# объединяем два dataframe по столбцу 'Category'
final_df <- inner_join(medians_df, wilcox_df, by = "Category")
# создаем dataframe с медианами
medians_df <- cleaned_data %>%
group_by(Category) %>%
summarise(across(where(is.numeric), median, .names = "median_{.col}"))
# создаем dataframe с p-значениями теста Манна-Уитни
wilcox_df <- cleaned_data %>%
group_by(Category)  %>%
summarise(across(where(is.numeric), ~ wilcox.test(. ~ Category, data = cleaned_data)$p.value, .names = "wilcox_{.col}"))
# объединяем два dataframe по столбцу 'Category'
final_df <- inner_join(medians_df, wilcox_df, by = "Category")
# создаем dataframe с медианами
medians_df <- cleaned_data %>%
group_by(Category) %>%
summarise(across(where(is.numeric), median, .names = "median_{.col}"))
# создаем dataframe с p-значениями теста Манна-Уитни
wilcox_df <- cleaned_data %>%
group_by(Category)  %>%
summarise(across(where(is.numeric), ~ wilcox.test(. ~ Category, data = cleaned_data)$p.value, .names = "wilcox_{.col}"))
# объединяем два dataframe по столбцу 'Category'
final_df <- inner_join(medians_df, wilcox_df, by = "Category")
print(final_df)
